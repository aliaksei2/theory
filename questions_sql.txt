0. что такое нормализация 
-это процесс организации данных в бд для того чтоб предотвратить избыточность и дублируемость информации, сделать бд более гибкой и безопостной путем соблюдний правил. их 6

Первая нормальная форма (1NF) — нет повторяющихся групп в строках
Вторая нормальная форма (2NF) — каждое неключевое (поддерживающее) значение столбца зависит от всего первичного ключа
Третья нормальная форма (3NF) — каждое неключевое значение зависит только от первичного ключа и не имеет зависимости от другого неключевого значения столбца

0.1 что такое денормализация
- это намеренное приведение бд в состояние не удовлетворяющее нормальным формам

0.2 кикие бывают свзяи в бд
- 1 к 1 (когда одна запись в таблице имеет строго одно значение в другой таблице, напрмер человек и паспортный номер)
- 1 ко многим (когда одна запись в одной таблице имеет несколько значений в другой таблице, напрмер автор книг и произведения)
- многие ко многим (когда много записей имеет много значений в другой таблице. для такой свзяи используется третья таблица которая соединяет это, например преподаватели в университете и предметы. преподаватель может вести несколько разных предметов, и один и тот же предмет может вести несколько преподавателей)
 
1. что такое sql
- это язык язык структурированных запросов. это язык программирования для хранения и обработки информации в реляционных базах данных.

2. что такое СУБД
- система управления базами данных. это комплекс программно-языковых средств, позводяющих создавать базы данных и управлять данными. другими словами это набор программ позволящий организовать, контролировать и администрировать базы данных.

3. виды СУБД
- Oracle
- MySQL
- Microsoft SQL server
- PosgreSQL
- MongoDB
...

4. какие бывают базы данных
- иерархиечские - это модель где используется представление базы данных в виде древовидной структуры, состоящей из объектов(данных) различных уровней.
- сетевые - это модель данных где несколько записей или файлов могут быть связаны с несколькими владельцами файлов и наоборот. модель может рассматриваться как перевернутое древо. по сути это отношения в чистой форме, где один элемент может указывать на множество элементов данных и само по себе может быть указано несколько элементов данных.
- колоночные - данные каждого столбца хранияся отдельно от других столбцов. такой прицнип хранения позволяет при выполнении запроса считывать с диска данных только тех столбцов которые непосредственно участвуют.
- реляционные - это набор данных с предопределнными связями между ними. эти данные организованны в виде набора таблиц, состоящих из столбцов и строк. в таблицаххранится информация об объектах, представленных в базе данных.
- нереляционные - это база данных в которой в отличие от большинства традиционных систем баз данных не используется табличная схема строк и столбцов
- объектно-ориентированные - это база данных в которых данные моделируются в виде объектов, их атрибутов, методов и классов

5. что такое реляционная база данных
- реляционные базы данных это тип хранения данных в виде таблиц. например используется субд MySQL, Oracle DB, PostgreSQL. это структурированые данные хранящиеся в таблицах со строками и сталбцами. 

6. DDL что это
- data definition language - это группа операторов опредления данных. другими словами с помощью опереторов, входящих в эту группы мы определяем структуру базы данных и работаем с объектами этой базы. то есть создаем, изменяем и удаляем их.
в эту группу входят следующие операторы: CREATE, ALTER, DROP

7. DML что это
- data manipulation language - это группа операторов для манипуляции данными. с помощью этих операторов мы можем добавлять изменять удалять и выгруждать данные из базы, тоесть манипулировать ими. 
в эту группу входят самые распространенные операторы языка SQL:SELECT, INSERT, UPDATE, DELETE

8. DCL что это
- data control language - группа операторов определения доступа к данным. иными словами это операторы для управления разрешениями с помощью них мы можем разрешать или запрещать выполнение определенных операций.
сюда входит: GRANT, REVOKE, DENY
 
9. TCL что это
- transaction control language - группа операторов для управления транзакциями. транзакция это команда или блок команд которые успешно завершаются как единое целое при этом в базе данных все внесенные любой командой входящей в транзакцию будут отменены. 
сюда входят: BEGIN TRANSACTION, COMMIT TRANSACTION, ROLLBACK TRANSACTION, SAVE TRANSACTION.

9.1 подключение к базе данным
- тап по кнопке new database conection
- заполнить поля host, port, database, username, password
- слева отобржается список конектов
- ПКМ, sql editor

10. create table
$ CREATE TABLE table_name (
	column1 datatype,
	column2 datatype
);

$ CREATE TABLE person (
	personID int,
	lastName varchar(255)
);

11. select, select into, select distinct
$ SELECT column1 FROM table_name
$ SELECT * FROM table_name

$ SELECT column1, column2 
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;

12. update
- обновить данные в таблице
$ UPDATE table_name
SET column1 = value1, column2 = value2
WHERE condition;

13. dalete
- удалить данные из таблицы
$ DELETE FROM table_name 
WHERE condition;

$ DELETE FROM person 
WHERE name='Alex';

14. drop table
$ DROP TABLE table_name;

15. order by
$ SELECT column1, column2
FROM table_name
ORDER BY column1, column2 ASC|DESC

16. where
17. join
- join or inner join  объединяет столбцы с данными у которых есть пара
$ SELECT column_name(s)
FROM table1 INNER JOIN table2
ON table1.column_name = table2.column_name

$ SELECT table1.column1, table2.column1
FROM table3 JOIN table1
ON table3.column1 = table1.id
JOIN table2
ON table3.column2 = table2.id
WHERE table2.column1 < 1000;

- left join объединяет столбцы даже если нет пары(если в левой таблице есть параметры а в правой нет)
$ SELECT column_name(s)
FROM table1 LEFT JOIN table2
ON table1.column_name = table2.column_name

- right join аналогично что и left join только с правой таблицей
$ SELECT column_name(s)
FROM table1 RIGHT JOIN table2
ON table1.column_name = table2.column_name

- FULL OUTER JOIN (FULL JOIN) соединяет все данные, совмещяет LEFT AND RIGHT JOIN
$ SELECT column_name(s)
FROM table1 FULL OUTER JOIN table2
ON table1.column_name = table2.column_name

18. and, or,  not
$ SELECT * FROM table_name
WHERE country='Germany' AND city='Berline';

$ SELECT * FROM table_name
WHERE city='Berlin' OR city='Munchen';

$ SELECT * FROM table_name
WHERE NOT country='Germany';

19. min,  max
$ SELECT MIN(column_name)
FROM table_name
WHERE condirion;

$ SELECT MAX(column_name)
FROM table_name
WHERE condition;

20. count, avg,  sum
- возвращает общее количество строк с указаным параметром
$ SELECT COUNT(column_name)
FROM table_name
WHERE condition;

- возвращает среднее значение числового столбцв
$ SELECT AVG(column_name)
FROM table_name
WHERE condition;

- возращает общую сумму числового столбца
$ SELECT SUM(column_name)
FROM table_name
WHERE condition;
 
- вычислительные операции внутри запроса(пример из stepik)
SELECT author, SUM(price * amount) AS sum_price, ROUND(SUM(((price * amount) * 0.18) / (1 + 0.18)),2) AS tax, ROUND(SUM((price * amount) / (1 + 0.18)),2) AS without_tax FROM book
GROUP BY author;
 
21. like
- ищет значения из указаного столбца в котором есть какой то символ
$ SELECT column1, column2
FROM table_name
WHERE column1 LIKE 'a%'

22. union
- используется для объединения результатов оператор SELECT из двух и более таблиц. объединяет таблицы сверзу вниз(вертикальное соединение) (a JOIN объединяет слева справа). критерии для объединения: одинаковый тип данных, одинаковое количество столбцов.
$ SELECT column_name FROM table1
UNION
SELECT column_name FROM table2;

23. in,  between
- выводит только те столбцы в которой есть конкретные параметры 
$ SELECT * FROM table_name
WHERE country IN ('France', 'UK');

- выводит столбцы в которых значения входят в указаный диапозон
$ SELECT * FROM table_name
WHERE column_name BETWEEN 1 AND 12;

24. alter table
- вносит изменения в структуру таблицы
$ ALTER TABLE table_name
ADD column_name varchar(40);

- переименовать колону
$ ALTER TABLE table_name
RENAME COLUMN old_name to new_name;

-удалить столбик
$ ALTER TABLE table_name
DROP COLUMN column_name;

- поменять тип колоны
$ alter table table_name
	alter column column_name type varchar(50);

25. not null
- не прнимает пустое значение в колонку, обязательно должен быть параметр
$ CREATE TABLE table_name (
	ID int NOT NULL,
	name varchar(33) NOT NULL,
	age int NOT NULL
);

26. unique
- гарантирует что все значения в столбце будут отличаться друг от друга, не будет одинаковых значений
$ CREATE TABLE table_name (
	ID int NOT NULL UNIQUE,
	name varchar(200) NOT NULL,
	age int
);

27. primary key
- благодаря нему можно соединять таблицы по главному ключу, обычно ставят его на ID
$ CREATE TABLE table_name (
	ID int NOT NULL PRIMARY KEY,
	name varchar(200) NOT NULL
);

28. foreign key
$ CREATE TABLE table1
	ID int PRIMARY KEY,
	name varchar(200) NOT NULL,
	age int NOT NULL,
		FOREIGN KEY(name
		REFERENCES table2(id),
		FOREIGN KEY(age)
		REFERENCES table3(id)
);
 
29. auto increment
- автоматически увеличивает значение на 1, обычно используется в ID(аналог serial) используется в mySQL
$ CREATE TABLE table_name(
	ID int NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name varchar(200) NOT NULL
);

30. serial
- задает авто изменение порядкогого номера(то есть плюс один к предыдущему числу) и задае колонке NOT NULL (аналог auto increment), используется в postgre
$ CREATE TABLE table_name (
	ID SERIAL PRIMARY KEY,
	name varchar(50) NOT NULL
);

31. group by
$ SELECT column_name FROM table
GROUP BY column_name;

32. insert into
$ INSERT INTO table (column1, column2)
	VALUES ('Alex', 1),
	       ('Kate', 2);

33. если в ячеки написано NULL это означает что ячеки просто не существует, если бы ячейка была пустой, то там было бы просто белое, а так это показывает что ячейки просто не существует

34. SubQueries (подзапросы)
- в данном подзапросе должно быть только одно число, по сколько сравнивать можно только с одним числом)
$ SELECT * FROM table
WHERE price < (SELECT AVG(price) FROM table);

- агрегатор ALL ознчает "всё". данный запрос выведет информацию цен товара которые меньше чем все цены из подзапроса ( тоесть меньше чем МИНИМАЛЬНОЕ значение из подзапроса)
$ SELECT * FROM table
WHERE price < ALL (SELECT price FROM table WHERE price < 1000);

- знак <> означает что НИЧЕМУ НЕ РАВНО
$ SELECT * FROM table
WHERE price <> ALL (SELECT price FROM table WHERE price < 1000);

- агрегатор ANY. данный запрос возвращает МЕНЬШЕ МАКСИМАЛЬНОГО. 
$ SELECT * FROM table
WHERE price < ANY (SELECT price FROM table WHERE price < 1000);

- если мы используем с ANY = то это как агрегатор IN
$ SELECT * FROM table
WHERE price = ANY (SELECT price FROM table WHERE price < 1000);

35. разница между drop delete truncate
- drop удаляет таблицу или колонки 
- delete удаляет данные внутри таблицы которые выберем
- truncate удаляет сразу все записи из таблицы

36. агрегатные функции count, avg, sum, min, max

37. ограничение primary key, foreign key, check, default, index, not null, unique

38. нужна ли реляции для соединения join 
- нет


