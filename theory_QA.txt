- тестирование это проверка соотвествия между реальным и ожидаемым поведением программы и то на сколько удовлетворен качеством продукта заказчик или заинтересованные лица. другими словами тестирование это проверка качества приложения. это процесс испытания приложения целью которого убедиться что фактическое поведение приложения соотвествует ожиданиям из документации и самого заказчика

- цель тестирования это убедиться что приложение рабоатет как задумано и соотвествует требованиям и желаниям заказчика и пользователей.

- баг это отклонение фактического результата от ожидаемого

-верификация это процесс оценки системы или ее компонентов с целью определения удовлетворяют ли результаты текущего этапа разработки условиям сформированным в начале этого этап. доказательство того что определенные требования были выполнены. проверки выполняются в процессе разработки ПО и отвечают на вопрос "правил
ьно ли мы разрабываем продукт?" (првоерка того что процесс разработки приложения идет по плану и соотвествует ТЗ)

-валидация это определение соотвестия разрбатываемого ПО ожиданиям и потребностям пользователя, требованиям к системе. демонстрирует что рабочий элемент может использоваться пользователями для решения определенных ими задач. это процесс оценки конечного продукта и отвечает на вопрос "правильный ли мы разработали продукт?" (процесс проверки конечного варианта ПО и сравнение результата с ТЗ)

-представим блюдо в ресторане. Верификация будет включать проверку технологической карты, оценку процесса приготовления (температуры, времени и т.п.). На протяжении этого процесса можно будет примерно быть уверенным, что блюдо получится именно тем, какое задумывалось и в итоге формально мы его приготовим. Валидация же - это, по сути, попробовать приготовленное блюдо, чтобы удостовериться, действительно ли получилось то, что ожидал бизнес и клиент.


- FAQ (frequently asked question/s) часто задаваемые вопросы

1. functional testing 
- проверка приложения на то, что все функции соотвествуют функциональным требованиям из ТЗ. в большинстве случаях используют метода черного ящика. к функциональному тестированию относят (unit test, regression test, smoke test, integrational test, sanity testing(проводится между smoke и regresion и нужно чтоб убедиться что какая та конкретная функция работает исправно. санитарное тестирование направлено вглубь функции, а смоук направлено вширь), beta/usability testing, system testing, E2E testing). обычно используют две техники тестирования (тестирование на основе требований и тестированиена основе бизнес-сценариев)
- критерии начала: (requirement specification document определен и утвержден, подготовлены тест кейсы, созданые тестовые данные, среда для тестирвоания готова и все необходимые иструмены доступны и готовы, все или часть приложения разработано и модульно протестировано и готово к тестированию)

- критерии окончания: (выполнение всех функциональных тестов завершено, нет критических или открытых ошибок, сообщенные ошибки были подтверждены)

- этапы:
1. определить функциональности продукта котоыре необходимо протестировать и включает в себя тестирование основных функций, удобоство использования
2. создание входных данных по спецификации требований
3. из спецификации требований определяется результат для тестируемой функциональности
4. использование тест кейсов
5. фактический и ожидаемый результат сравнивают и по итогу решают работает ли так как задумано

2. non functional testing
- проверка всех не функциональных элементов приложения. другими словами проверка приложения на качество и прочность. проверяет поведение системы по всем аспектам, не охваченые функциональностью. (stress test, volume test, security test, configuration test, load test, interraption test, perfomance testing, recovery testing, failover testing, efficiency testing, disaster recovery testing, installation testing, documentation testing, UI testing, localization testing, internationalization, portabiliry testing,)

- нефункциональные требования могут быть отражены как:
1. пользовательские/технические истории
2. критерии приемки
3. в артефактах

- документ подхода к тестированию (approach document)
1. объем испытаний
2. метрики
3. инструменты тестирования
4. основные даты и результаты

2.1 по структуре и архитектуре ПО

3. domain testing/analyssis
- метод разработки тестовых сценариев когда множественные значения должны или могут быть протестированы одновременно. в него входит класс эквивалентности, граничащие значения, попарное тестирование.

3.1 regrational testing 
- прводится после добавления новых функциональностей к готовому билду, когда происходит обновление, когда добавляется новая часть кода к уже существующему, когда были пофикшены баги. проводить желательно каждый раз после добавления новой функциональности. проводится проверка блоков которые окружают и взаимодействуют с той частью которую добавили или испраивли.
- формирование список првоерок для регрессии происходит следующим путем: на каждом проекте есть папка test suite. и когда бы планируем регрессию, мы смотрим в какой зоне было исправление кода или добавление нового, обращаемся к test suite
- регрессия делается после того когда разработчики добавили все то, что хотели, когда в данном релизе они больше ничего добавлять не будут
- на каждого тестировщика как правило возлагается не больше 70 кейсов регрессии 

4. levels by priority (smoke, critical path, extended)
- smoke проводится первым делом, првоеряется самые базовые функции, проверяется что приложении вообще работает и что его можно тестировать дальше
- critical path проводится следующим действием, тут проверяется весь путь от начала до конца, который будет совершать ообычный пользователью. есть как позитивные так и негативные проверки
- extended проводится только тогда когда есть на это время. проверяется нестандартно использование приложения. вставка спец символов, переполненные поля ввода и так далее.

5. test pyramid/testing levels by detalization (unit, integration, system testing, acceptance testing)
- unit это проверка маленького куска кода(функциональности) на проверка того что оно готово к следующей части разработки и тестирования. используется метод белого ящика.
- integration проверка несколько объединенных маленькиъ кусочков, проверяется как они работают вместе, переходы между этими кусками.
- system testing - это првоерка всего приложения в целом, когда все юниты соединены в одно целое. используется метод черного ящика. оценивается готовность приложения с точки зрения пользователя с помощью документа спецификации и оно не требует каких либо внутренних знаний.
- acceptance testing формальный процесс тестирования на котором првоеряются удовлетворяет ли система приемочным критериям и заказчик дает добро на релиз

6. GUI testing 
- это проверка графического интерфейса пользователя на соотвествия желаниям и нормам заказчика.

7. usabitily testing 
- это проверка приложения на то, что оно удобно в использовании. что функциональность логична и понятна без туториолов, что приложение доступно для людей с ограниченными возможностями, что приложение приносит положительные эмоции.

7.1 accessibility testing
- это подвид usability testing, проверяется на сколько приложение удобно и доступно люядм с ограниченными возможностями.

8. localization testing 
- проверка приложения на лингвистические и культурные особенности (перевод текста, правовые требования, валюта, символика, раскладка клавиатуры, интеграция со сторонними приложениями)

8.1 internationalization testing
- проверка приложения на работоспособность в разных регионах и културах. проверить может ли код обрабатывать всю международную поддержку не нарушая функциональность (формат данных, функциональную часть, пользователький интерфейс,то как наладываеся графика под определенный язык, выделение локализованных элементов из кода) 

9. requirement testing 
- тестирование требований очень важная и самая первая проверка на проекте. от нее зависит дальнейший успех команды на проекте. именно на этапе тестиования требований, находятся самые важные ошибки, благодаря этому и удается удешевить проект и экономить время.

10. test case 
- вид документации где описано что должно быть проверено и пошаговая инструкция как проверять, данные и условия проверки.
- в него входит: title/summary, steps, ex/ac result, priority

10.1 test suite
- это набор тест кейсов которые относятся к одному функциональному модулю или по дургом критериям

11. test stratege
- документация разрабатываемая тестировщиками. отражает подход к тестированию и четко показывает что именно команда тестировщиков будет делать на проекте. после написания и прочтения тестовой стратегии, тестировщики начинают писать тест план.
- Scope and overview
- Testing methodology
- Testing environment specifications (Dev, QA, Prod)
- Testing tools
- Release control
- Risk analysis
- Review and approvals 

12. test plan
- документация разрабатываемая тестировщиками. документ описывает весь объем работ по тестированию,начиная с описания объекта, стратегии, расписании, критериев начала и окончания тестирования, оборудование и ресурсы, риски.
- Test strategy
- Objectives(goal/target)
- Test schedule
- Criteria
- Required resources (human resources, software, and hardware)
- Roles and responsibility
- Risk evaluation 
- Metrics
- Test estimation
- Test deliverables 

13. estimation 
- приблизительная оценка времени и денег требуемые для выполнения задачи 
планирование тестирования:
- определить требования к тестам
- оценка рисков
- разработка стратегии тестирования
- определить ресурсы
- разработка тест плана
- создание графика работ

наиболее популярные методы:
- метод экспертной оценки(пальцем в небо)
- метод дельфи (проводится экспертами. команде выдаются анкеты на которые они отвечаю несколько раундов. после эксперты зачитывают анонимно варинты ответов участников и после предлагают заново ответить на вопросы просле услышанных варинатов ответов своих коллег)
- метод декомпозиции (задача разбивается до более мелких задач, до тех пор пока не дойдет до самой минимальной задачи которую легко оценить по времени)
- покер (вся команда собирается, у каждого есть одинаковые карты (условно числа фибоначи) и на каждую задачу человек поазывает карту которая характеризует время которое он затратит на эту задачу. если числа у всей команды плюс минус схожи, то берется среднее значение или максимальное. если разница большая, то происходмт дискуссия. также если надо оценить сложность задачи, то используют story Point. Story Point это способ оценки сложности задачи. для определения поинтов, берется какая та эталонная задача и от нее отталкиваются.)
- T-shirts (используется единицы измерения S,M,L,XL)

13.1 requirement matrix
- это таблица связей между требованиями и тест-кейсами. документ связывающий другие важные тестовые артефакты, что позволяет в любое время проверить их, отследить изменения и уточнить. улучшает видимость процессов тестирования. помогает гарантировать что ни одно требование не будет упущено.
- компонены матрицы:
1. ID
2. тип требования
3. описание требования
4. статус тест-дизайна

чаще всего в матрицу включаются системные и инит тест кейсы

13.2 user story
- документ используемых в гибких методалогиях. состоит из нескольких предложений где описываюься функциональную и не функциональную потребность пользователя.

13.3 report of testing
- документ описывающий результат работ по тестированию.
состоит из:
1. состав команды
2. сроки выполнения, за который выполняется отчет
3. описание процессов тестирования
4. изменения тестовой модели
5. процент пройденых тестовых кейсов
6. критичные и блокирующие проблемы и принятые меры по их устранению

14. QA, QC, testing
- QA это совокупность мероприятий охватывающий все технологические этапы разработки приложения. работает на всем пути жизненного цикла ПО (проверка технических харктеристик и требований к ПО, оценка рисков, планирование задач для улучшения качества продукции, подготовка документации и тестового окруженния и данных, тестирование, анализ результатов тестирования а также составление отчетов и других документов)
- QC следит за тем, чтоб процессы установленные QA соблюдались. он подключается на этапе составления критериев качеств, метрик и способов оценки (првоерка готовности ПО к релизу и проверка соотвесвтия требований и качества данного проекта)
- testing процесс содержащий все активности жизненного цикла, цель которого определить что разрабатываемый продукт соотвесвтует описаным требованиям. предоставляет сведения о текущем качетсве продукта. 

15. принципы тестирования
- тестирование демонстрирует наличие дефектов. (тестирование может показать что дефекты присутсвууют, но не может доказать что дефектов нет)
- исчерпывающее тестирование невозмонжно.
- ранее тестирование. (тестирование должно начинаться как можно раньше. а именно когда сформировались требования)
- скопление дефектов (при обнаружении дефекта в какой то области приложения,большая вероятность что где то рядом будут находиться еще дефекты)
- парадокс пестицида (чем больше тестируем ПО, тем более невосприимчивым оно становится к имеющимся тестам)
- тестирование зависит от контекста (в зависимости от приложения и рисков для этого приложения, тестовые кейсы будут создаваться строго индивидуально)
- заблуждение об отсуствии ошибок 

16. SDLC
- сбор и анализ требований (какие проблемы требуют решений?): нужно получить обратную связь от заказчика и потенциальных пользователей.
- планирование (что мы хотим сделать?): этот этап требует тщательного анализа и проработки приложения. как со стороны затрат так и со стороны выгоды 
- дизайн (как мы добьемся цели?): на этом этапе мы должны уже четко представлять какое именно будет приложение. по его зарактеристикам и примерному концепту
- разработка: на данном этапе происходит воплощение мыслей и ожиданий в реальный продукт 
- тестирование: на этом этапе происходит проверка качества и надеждности приложения, чтоб убедиться что пользователям будет приятно и комфортно пользоватться приложеним
- развертываение: на этом этапе происходит открытие доступа к вашему прилоежнию для заказчика и потенциальных пользователей


17. STLC
- анализ требований
- планирование тестирования
- разработка тест кейсов
- настройка тестовой среды
- выполнение тестов
- завершение цикла испытаний  

18. models and methodologies
- RUP, Rational Unifiled Process (использует итеративную модель разработки. каждая итерация длится от 2 до 6 недель и по окончанию итерации команда должна достичь определенных целей. жизненный цикл в этой модели состоит из 4 пунктов: 1-начальная стадия(inception), 2-уточнение(elaboration), 3-построение(cjnstuction), 4-внедрение(transition).
- watherfall (старая модель которая используется только на тех проектах,где критически важно качество. особенность этой модели в том, что нельзя приступить к следующей задаче, не закончив на 100% прошлую. 1-анализ требований. 2-проектирование. 3-разработка. 4-тестирование. 5-техническая поддержка)
- V-model (эта модель основана на waterfall. только отличие в том, что тестирование начинается одновременно с разработкой и каждый этап идет вместе с тестированием)
- incremental (1-дизайн и разработка. 2-тестирование. 3-реализация и так каждый раз по занову. такое подходит для больших проектов. разрабатывается большой план по приоритету, с разными модулями, созадли модуль - выкатили, потом заново созадется новый модуль и добавляется к уже выпущеному. каждый модуль разрабатывается по методу водопада. сначала разрабаыватеся основной продукт и после добавляются другие элементы, называемые инкременты.) 
- iterative (заключается в том что созадется приложение где ясны оснвоные задачи и есть общее представление об работе приложения, но детали не ясны, не понятно как именно будет рабоать та или иная функция. она подходит для больших проектов, по типу соцсетей, корпоративные платформы. общий функционал понятен, но количесвто фунций и возможности не определены) 
- spirel (данная модель состоит из 4 этапов: планирование, анализ рисков, разработка, оценка. тестирование начинается еще на этапе планирования и длится до стадии оценки. данная модель может быть затратной и не подходит маленьким проектам. ее суть в том, что каждый этап SDLC проходит один веток этой сперали, через эти 4 этапа. когда один веток пройден, берется следующий этап и проходит теже самые этапы в спирали)
- agile (основная суть данной методологии это быстро реагирование на возможные изменения, нежели стремление положиться на долгосрочное планирование. основные методы входящие в гибкую методологию являются scrum,kanban)
- XP (extreme Programming) (это набор практик, одна из которых является попарное тестирование. один программист пишет код,второй сразу же делает ревью. это повышает эффектривность на 30 процентов. но также это ускоряет утопмляемость программистов. тестирование начинается еще раньше чем написана первая строка кода. главным достоинством является то что постоянно идет тестирование и короткие релизы)
- srum это гибкая методология. главная ее отличие от другие это что она имеет жесткие временные рамки, называемые спринты. на проекте есть такие люди как Scrum master, product owner, developers. в данной методологии есть такие понятия как backlog(product backlog and sprint backlog). product backlog это большой список задач которые команда должна сделать для достижения итоговой цели. sprint backlog это задачи на данный спринт взятые из product backlog. количество задач на спринт распределяются следующим путем - к каждой задачи прикреплена оценка трудозатратности (story point), и первые 1-3 спринта команда смотрит сколько story point они могут делать за один спринт и после от этого отталкиваются. story point этоцифры фибоначи (1,2,3,5,8,13) иногда больше, но принято если задача имеет оценку 13 story point то ее дробят на более мелкие задачи. и вот условно команда может сделать за принт около 30 story point и под эту цифру подгоняется количество задач. также в sсrum есть 4 вида созвонов (sprint planning(длитеся не больше 8 часов для месячного спринта), stand-up/daily(15 минут), sprint review(4 часа для меячного спринта), sprint retrospective(3 часа для месячного спринта)). в скраме есть 5 ценностей: приверженность, сфокусированность, открытость, уважение и смелость. также есть эмпирические столпы: прозрачность, инспекция, адаптация. спринт может быть отменен только если sprint goal потеряла актуальность и только продукт оунер может отменить спринт.

19. жизненный цикл бага
- новый (означает что баг был обнаружен тестировщиком, зарегистрирован и создана документаци)
- назначен (после того как баг проверили и подтвердили, назначается отвественный на исправление его)
- открыт (означает что баг приняли разработчики и начали исправлять. на данным этапе могут быть статусы ОТКЛОНЕН или ОТЛОЖЕН самими разработчиками)
- устранен (разработчики исправили ошибку в коде и отправили тестировщику на проверку)
- ожидает повторного тестирования (ожидается когда тестировщик приступит к повторной проверке бага)
- повторное тестируется (тестироващик принялся к тестированию)
- повторно открыт (ставится статус когда разработчики не смогли пофикстить баг и он все еще октуальный)
- проверен (тестировщик еще раз проверяет баг, и если баг исправлен и все хорошо)
-закрыт (когда разработчик и тестировщик полностью исправили баг и он больше не всплывает)

- жизненнвй цикл бага на проде и в тестовой среде отличается тем, что на проде он должен быть гораздо быстрее (нашли,оформили,исправили,прогнали,релизнули)

- если я нашел баг, оформил, назначил разрабу на исправление....разраб пофиксил данный баг, но из-за фикса данного бага, я нашел другой баг, то я закрываю баг который уже пофиксили и завожу новый баг который который появился и назначаю тому же разработчику

20. Зачем нужна тестовая документация? 
Тестовая документация нужна для того чтобы видеть последовательность действий и не упустить проверку какой либо функциональности. Нужна для того чтоб новые рабочие кадры придя на проект, смогли быстро влиться в работу, изучив тестовую документацию. Ну и по готовым тест кейсам проще и быстрее писать автоматизацию.

21. Что такое испытание на основе рисков
Это тестирование нацелено на проверку самых важных потенциально имеющих недостатки функций которые могут навредить бизнесу. Прежде чем делать данное испытание, нужно провести анализ рисков, после которого будет видно на что именно надо уделить внимание.

22. Что такое contract testing     
Контрактное тестирование - это подход, при котором разработчики сначала определяют, как отдельные службы в рамках одной прикладной системы должны взаимодействовать друг с другом. С помощью этой информации команды создают виртуальные контракты, которые определяют, как именно должны взаимодействовать две микросервисы.

23.  Какие тест-кейсы можно сделать для тестирования баз данных
- Отображение информации
- Обновление записи в таблице
- Тестирование свойств: атомарность, последовательность, прочность, изоляция
- Сохранность и целостность 
- Соответствие установленным бизнес-правилам

24. Что такое и чем отличаются виртуальная машина, симулятор и эмулятор
- Виртуальная машина это то где запускается симулятор и эмулятор
- Симулятор это воспроизводящая визуальную демонстрацию ПО
- Эмулятор это дублирование среды

25. Для какого функционала труднее всего написать тест-кейсы
Для функционала который постоянно меняется, где большой поток входных и выходных данных. А так же где нет ТЗ

26. Что такое Configuration Testing
Это вид тестирования направленный на тестирование проверку работы ПО при различных конфигурациях системы(при различных конфигурациях компьютеров, телефонов).

27. Что такое Traceability Matrix
Это таблица, содержащая соответствие функциональных требований продукта и подготовленных тестовых сценариев

28. Какое должно быть процентное соотношение между позитивными и отрицательными тестами
Четких чисел нет, надо в первую очередь смотреть на ТЗ, но примерно это 80-20

29. Что такое A/B тестирование
Это деление аудитории/пользователь на два лагеря, где у одних ничего не меняется, а вторым вводится новая фича. После разделения и внедрения фичи одной из групп, мы собираем данные и анализируем, получили ли мы тот эффект от новой фичи, который ожидали 

30. Что такое fuzz-тестирование и где его используют
- это тип автоматического тестирования на безопасность, когда программа вводит большое количества случайных данных тем самым проверяя как приложение будет вести себя и выявляет таким образом лозейки и ошибки в безопасности.

31. 4 types of environment(servers)
- Dev
- Qa
- Stage
- Prod

32. method of testing  black box, grey box, white box
- black box тестирование методом черного ящика, это когда тестирования проводится без знания внутренней структуры компонентов или системы. тестируется внешний результат сборки ПО. смотрится поведение приложения с точки зрения внешнего мира без знаний о внутреннем коде приложения. этот метод используется в системной и приемочном тестировании для проверки различных функций и проверки того что система работает так как ожидается когда работает как единое целое. проводится в среде QA, а не разработчиками.
- grey box это тестирование когда частично известна внутренняя структура системы
- white box это тестирование основанное на анализе внутренней структуры компонента или системы. тестирование то что находится под копотом приложениях. проверить качество и целостность кода ПО.

- например видео игра. метод черного ящика будет заключаться в том чтоб посмотреть на сколько комфортно и приятно играть в игру. метод белого ящика заключается в том чтоб посмотреть что ввод определенных данных приводит к выполнению персонажем правильных действий.

33. static testing, dynamic testimg
- static testing это проверка вручную или с помощью инструментов программного кода без запуска самого кода, а также првоерка документации
- dynamic testing подразумевает запуск кода для проведения функциональных и не функциональных проверок. основная цель это подтвердить что программный продукт работает в соотвествии с трбованиями бизнеса.

34. test design
- тест дизайн нужен для создания максимально эффективного набора кейсов, покрывающий наиболее важные аспекты ПО. минимизировать количество тестов, необходимых для нахождения большинсва серьезных ошибок
- техники тест дизайна деляться на статические, динамические, black box
- одна из самых распространенных техник черного ящика является - pairwise testing(попарное). особенность его в том, что создаетс таблица в которой указаны все возможные отдельные комбинации каждой пары входных данных.

35. severity and priority
- severity: critical(баг приводит к масштабным последствиям), major(баг приносит ощутимые неудобства), medium(баг слабо влияет на типичные сценарии работы), minor(редко обнаруживается маленьким процентом пользователей)
- priority: ASAP(as soon as possible)(сделать нужно срочно,сейчас же), high(исправить нужно вне очереди,быстро), normal(исправить в порядке общей очереди), low(исправить когда будет время)

severity это важность для клиента
priurity это важность для бизнеса

- пример critical severity and low priority (кнопка другого цвета, которая может запутать пользователя. долго загружающееся приложение.

- пример low severity and high priority (орфогрфическая ошибка в названии компании на главной странице сайта)

36. качество ПО
- это способность программного продукта при заданных условиях удовлетворять установленным или предпологаемым потребностям.
- или это степень в которой система, компонент или процесс удовлетворяют потребностям или ожиданиям заказчика или пользователя.
- иными словами качество заключается в соотвествии требованиям и пригодности к использованию.
- показатели качества:
1. функциональная пригодность
2. уровень производительности (производительность относительно суммы использованных при определенных условиях ресурсов)
3. совместимость (способность системы продукта взаимодействовать с другими сисетмами других приложений)
4. удобство использования
5. надежность (выполнение системой определенных функций при указанных условиях и течении определенного времени)
6. защищенность (степень защиты персональных данных)
7. сопровождаемость (владелец приложения вместе с разработчиками обновляют возможности приложения)
8. переносимость (простота переноса системы из одной среды в другую)
 
37. виды, типы, уровни тестирования
- типы тестирования (ручное, автоматизированное)§
- виды тестирования (функциональное, не функциональное, по структуре и архитктуре ПО, по изменениям)
- уровни тестирования, функциональное (юнит, интеграционное, системное, приемочное)
- уровни тестирования, не функциональное (безопасность, производительность, юзабилити, совместимости)

38. тестовые артефакты
- тестовая стратегия
- тест план
- тестовый сценарий
- тест кейс
- матрица требований
- чек листы
- отчет о тестировании
- баг репорты
- требования
- метрики тестирования
- юзер стори
- модели
- дизайны
- макеты
- рисунки
- графики
- логи

39. alfa beta testing
- альфа тестирование это эксплуатационное тестирование рельными пользователями или заказчиком или независимой командой на стороне разработчика. проводится после приемочного тестирования и перед выпуском ПО для бета тестирования.
- бета тестирование это эксплуатационное тестирование реальными пользователями, заказчикаом или независимой командны на внешней стороне. используется для проверки готовности приложения к внешней эксплуатации и для сбора отзывов с рынка. это заключительный этап тестирования перед релизом.

40. техники тестирования
- методом черного ящика: эквивалетное, граничащие значения, доменное, попарное, таблица решений, диаграмма переходов состояний (представляет собой все возможные комбинации начальных и конечных состояний), график причинно-следственной связи, сценарии использования, истории использования
-методом белого ящика: покрытие операторов, покрытие условий и решений, покрытие условий и значений операторов
- основанные на опыте: предугадывание ошибок, исследовательское тестирование, ad-hoc, тестирование по чек листу
- основанные на дефектах: таксономии дефектов

41.ci/cd pipeline
- ci (continuous integration) cd (continuous delivery) это иснтрумент создающий быстрый и точный путь смешивания работ разных людей в пределах одного проекта. оно оптимизирует код, тестирует и размещает в репозитории.
- ci/cd pipeline позволяет devops команде в режиме реального времени писать код, интегрировать, запувскать тесы, выпускать релизы, размещает изменения.

- ci это когда инструмент забирает код из рапозитория и начинает его прогонять и проверять. и по окнончанию получается итоговый артифакт
- cd это когда этот итоговый артифакт загружают на сервер

42. ТЗ и требования к нему
- техническое задание это документ на основании которого команда разработки реализует проект и который описывает:
1. назанчение сисемы которую надо разработать
2. перечень функций которые должны быть реализованы в рамках проекта
3. требования к интерфейсуъ4. требованя к интеграции (включая техническое описание API или любого другого формата обмена данными)
4. требования к архитектуре системы
5. бизнес процессы
6. пользовательские сценарии
7. методологию разработки
8. технологический стек (какие технологии будет использованы и почему)
9. и другое

- ТЗ пишет системный аналитик или ведущий разработчик. ТЗ долнжо отвечать на вопрос "что мы делаем?". ТЗ описывает продукт, договор описывает проект

43. атрибу требований
1. корректность (точное описание функциональностей)
2. проверяемость (формултровка должна быть написана таким образом чтоб можно было выставить однозначный вердикт выполнено или нет)
3. полнота (долнжо быть описано все что должно быть реализовано)
4. недвусмысленность (однозначные формултровки)
5. непротиворечивость (не должно быть внутренних противоречий к другим требованиям и документам)
6. приоритетность (у каждого требования должен быть приоритет)
7. атомарность (нельза разбить требования на отдельные части без потери делаей)
8. модифицируемость (в каждое требование можно внести изменение)
9. прослеживаемость (каждое требование должно иметь свой ID чтоб можно было ссылать на него)

44. таблица принятия решений (decision table)
- это техника test-design помогающая наглядно изобразить комбинаторику условий из ТЗ. таблица помогает создавать тест кейсы на основе требований и ничего не забывая, ведь каждая строка из таблицы это готовый тест кейс. таблица состоит из трех пунктов. справа в стобике идут условия и потом в самом низу идет результат. а сверху по горизонтали идет правило. создавая такую таблицу, нам проще будет найти ошибки в требованиях.

45. этапы тестирования 
- работа с требованиями
- разработка стратегии тестирования и планирование процедур контроля качества
- создание тестовой документации
- тестирование прототипа
- основное тестирование
- экплуатация и поддержка

46. тестовые окружения
- development
- test
- integration
- preprod
- prod

47. фазы тестирования
- pre-alpha
- alpha
- beta
- release candidate
- release

48. use case 
- это документ котоырй относится к требованиям/спецификации в котором описывается то какие действия пользователь может выполнять в приложении и как будет приложение реагировать на действия пользователя 

49. виды тестирования
1. по характеру сценарию (позитивные и негативные)
2. по запуску кода (статическое и динамическок)
3. по степени автоматизации (ручное и автоматизированое)
4. по объектам тестирования ( функциональное и нефункциональное)
5. по степени знания системы (черный, белый и серый ящик)
6. по времени проведения тестирования (смоук, регрешн, альфа и бета тестирование и другие)

50. bug report 
- это тестовый документ описывающий найденый деффект. 
- основные атрибуты: title/summary, description, STR, ex/ac result, severity/priority
- не основные атрибуты: attachment






