-тестирование это проверка соотвествия между реальным и ожидаемым поведением программы. другими словами тестирование и проверка качества приложения.
-валидация это определение соотвестия разрбатываемого ПО ожиданиям и потребностям пользователя, требованиям к системе.
-верификация это процесс оценки системы или ее компонентов с целью определения удовлетворяют ли результаты текущего этапа разработки условиям сформированным в начале этого этап.
1. functional testing 
- проверка приложения на то, что все функции соотвествуют функциональным требованиям из ТЗ

2. non functional testing
- проверка всех не функциональных элементов приложения. другими словами проверка приложения на качество и прочность

3. domain testing
- метод разработки тестовых сценариев когда множественные значения должны или могут быть протестированы одновременно. в него входит класс эквивалентности и граничащие значения.

3. regrational testing 
- прводится после добавления новых функциональностей к готовому билду, когда происходит обновление, когда добавляется новая часть кода к уже существующему

4. levels (smoke, critical path, extended)
- smoke проводится первым делом, првоеряется самые базовые функции, проверяется что приложении вообще работает и что его можно тестировать дальше
- critical path проводится следующим действием, тут проверяется весь путь от начала до конца, который будет совершать ообычный пользователью. есть как позитивные так и негативные проверки
- extended проводится только тогда когда есть на это время. проверяется нестандартно использование приложения. вставка спец символов, переполненные поля ввода и так далее.

5. testing levels (unit, integration, system testing, acceptance testing)
- unit это проверка маленького куска кода(функциональности) на проверка того что оно работает
- integration проверка несколько объединенных маленькиъ кусочков, проверяется как они работают вместе, переходы между этими кусками.
- system testing - это првоерка всего приложения в целом, когда все юниты соединены в одно целое.
- acceptance testing формальный процесс тестирования на котором првоеряются удовлетворяет ли система приемочным критериям и заказчик дает добро на релиз

6. GUI testing 
- это проверка графического интерфейса пользователя на соотвествия желаниям и нормам заказчика.

7. usabitily testing 
- это проверка приложения на то, что оно удобно в использовании. что функциональность логична и понятна без туториолов, что приложение доступно для людей с ограниченными возможностями, что приложение приносит положительные эмоции.

8. localization testing 
- проверка приложения на работоспособность в конкретной локали (язык,регион, кльтура и тд)

9. requirement testing 
- тестирование требований очень важная и самая первая проверка на проекте. от нее зависит дальнейший успех команды на проекте. именно на этапе тестиования требований, находятся самые важные ошибки, благодаря этому и удается удешевить проект и экономить время.

10. test case 
- вид документации где описано что должно быть проверено и пошаговая инструкция как проверять, данные и условия проверки.

11. test stratege
- документация разрабатываемая менеджером проекта. отражает подход к тестированию и четко показывает что именно команда тестировщиков будет делать на проекте. после написания и прочтения тестовой стратегии, тестировщики начинают писать тест план.

12. test plan
- документация разрабатываемая тестировщиками. документ описывает цели, подходы, ресурсы и график тестирования. указаны отвественные, объекты тестирования, тестовое окружение, методы, критерии входа и выхода, риски.

13. test estimation 
- приблизительная оценка времени и денег требуемые для выполнения задачи 
планирование тестирования:
- определить требования к тестам
- оценка рисков
- разработка стратегии тестирования
- определить ресурсы
- разработка тест плана
- создание графика работ

наиболее популярные методы:
- пальцем в небо
- метод дельфи (проводится экспертами. команде выдаются анкеты на которые они отвечаю несколько раундов. после по их ответам появляется конечный результат)
- метод декомпозиции (задача разбивается до более мелких задач, до тех пор пока не дойдет до самой минимальной задачи которую легко оценить по времени)
- покер (вся команда собирается, у каждого есть одинаковые карты (условно числа фибоначи) и на каждую задачу человек поазывает карту которая характеризует время которое он затратит на эту задачу. если числа у всей команды плюс минус схожи, то берется среднее значение или максимальное. если разница большая, то происходмт дискуссия. также если надо оценить сложность задачи, то используют story Point. Story Point это способ оценки сложности задачи. для определения поинтов, берется какая та эталонная задача и от нее отталкиваются.)
- T-shirts (используется единицы измерения S,M,L,XL)

14. QA, QC, testing
- QA это совокупность мероприятий охватывающий все технологические этапы разработки приложения. работает на всем пути жизненного цикла ПО
- QC следит за тем что процессы установленные QA. он подключается на этапе составления критериев качеств, метрик и способов оценки
- testing предоставляет сведения о текущем качетсве продукта. 

15. принципы тестирования
- тестирование демонстрирует наличие дефектов. (показывает что дефекты присутсвууют, но не может доказать что дефектов нет)
- исчерпывающее тестирование невозмонжно.
- ранее тестирование. (тестирование должно начинаться как можно раньше. а именно когда сформировались требования)
- скопление дефектов (при обнаружении дефекта в какой то области приложения,большая вероятность что где то рядом будут находиться еще дефекты)
- парадокс пестицида (чем больше тестируем ПО, тем более невосприимчивым оно становится к имеющимся тестам)
- тестирование зависит от контекста (в зависимости от приложения и рисков для этого приложения, тестовые кейсы будут создаваться строго индивидуально)
- заблуждение об отсуствии ошибок 

16. SDLC
- сбор и анализ требований
- дизайн
- разработка
- тестирование
- развертываение
- поддержка (обеспечивается работоспособность приложения)

17. STLC
- анализ требований
- планирование тестирования
- разработка тест кейсов
- настройка тестовой среды
- выполнение тестов
- завершение цикла испытаний  

18. models and methodologies
- RUP, Rational Unifiled Process (использует итеративную модель разработки. каждая итерация длится от 2 до 6 недель и по окончанию итерации команда должна достичь определенных целей. жизненный цикл в этой модели состоит из 4 пунктов: 1-начальная стадия(inception), 2-уточнение(elaboration), 3-построение(cjnstuction), 4-внедрение(transition).
- watherfall (старая модель которая используется только на тех проектах,где критически важно качество. особенность этой модели в том, что нельзя приступить к следующей задаче, не закончив на 100% прошлую. 1-анализ требований. 2-проектирование. 3-разработка. 4-тестирование. 5-техническая поддержка)
- V-model (эта модель основана на waterfall. только отличие в том, что тестирование начинается как только определены требования и возможно начать статическое тестирование)
- incremental (выглядит эта модель как мульти waterfall. одновременно несколько команд работают над одним приложеним, но над разными модулями. 1-дизайн и разработка. 2-тестирование. 3-реализация)
- spirel (данная модель состоит из 4 этапов: планирование, анализ рисков, разработка, оценка. тестирование начинается еще на этапе планирования и длится до стадии оценки. данная модель может быть затратной и не подходит маленьким проектам.
- agile (основная суть данной методологии это быстро реагирование на возможные изменения, нежели стремление положиться на долгосрочное планирование. основные методы входящие в гибкую методологию являются scrum,kanban,XP)
- XP (extreme Programming) (особенность является в том, что происходит попарное тестирование. один программист пишет код,вторая сразу же делает ревью. тестирование начинается еще раньше чем написана первая строка кода. главным достоинством является то что постоянно идет тестирование и короткие релизы)



