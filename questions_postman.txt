1. что такое postman
- это приложение для взаимодейятсвия и тестирования API

2. что такое newman CLI
- это способ запускать коллекцспособ запускать коллекции из postman через терминалл 

3. что такое окружение 

4. что такое парсить респонс и как его делать
- забрать данные которые присылает сервер в ответе
$ var jsonData = pm.response.json()
- где jsonData просто переменая с удобным для меня именем, должно быть уникальным
- где pm это библиотека postman
- где response это параметр для парсинга ответа сервера
- где json() это параметр в каком виде забрать ответ

$ var res_name = jsonData.name
- где res_name это имя переменной (может быть любым, но уникальным)
- где jsonData это имя переменной в которую внесены данные что нужно зайти в структуру response
- где .name это какой именно параметр забрать

- если нужно забрать параметр в другом типе (string or number etc)
$ var res_age = String(jsonData.age);
- где String это тип в который преобразовать данные
- или можем использовать + для преобразования параметра в тип number
- где (jsonData.age) какой именно параметр забрать 

- если нужно забрать данные из response, но имя имеет в себе . 
$ var res_salary_1_5 = jsonData[qa_salary_after_1.5_year];
- где [qa_salary_after_1.5_year] это имя параметра который содержит . и без [] имя прерывается на . 

- если нужно забрать какой то элемент из древа структуры json и зрабарть определенный элемент
$ var res_name = jsonData.person.u_name[0]
- где preson.u_name[0]  это путь к данным что нам нужно
- где person это корневое название параметра в структуре json в котором находится параметр который нам надо
- где u_name это имя параметра в котором содержится элемент который нам надо
- где [0] это порядковый номер элемента в структуре  

5. что такое парсить реквест и как его делать
- это забрать данные которые клиент посылает на сервер
- сначала парсим весь запрос
$ var req = request.data (method post)
- где req это просто имя переменной, оно может назвыаться как угодно, главное чтоб было уникальным
- где request это параметр который лезет непосредственно в запрос
- где data это параметр который забирает информацию

$ var req = pm.request.url.query.toObject() (method get)

- после создаем переменные с конкретными данными запроса
$ var req_name = req.name
- где req_name просто переменная с удобным для меня названием
- где req это переменная в которой заключены параметры из выше (var req = request.data)
- где name это имя ключа который надо забрать  из запроса клиента на сервер
 
6. как отпрвлять запрос на сервер методом get post
- если хотим отправить запрос на сервер методом get, то можно написать данные в окне params либо в URI отделив endpoint c параметрами ? знаком, а параметры разделять &  например http://162.55.220.72:5005/get_method?name=alex&age=25 
- если хотим отправить запрос методом post, то можно вписать данные в окне body form-data. либо в окне body raw (json) вручную написать json схему.
- raw json :
{
	"name" : "Alex,
	"age" : 25,
	"sex" : "male",
	"token" : "{{token}}"
} 

7. как заносить данные в environment
- можно вручную через графический интерфейс в постмане 
- можно автоматически парсить параметры запроса
$ pm.environment.set('name', req_name)
- где pm это библиотека постман
- где environment параметр куда залезть
- где set это что именно сделать (положить,установить,занести)
- где 'name' это название которое присвоется ключу в окружении
- где req_name это какой именное значение занести в окружение

$ pm.environment.set("name");
- создать переменную в окружении

8. проверить что параметр в ответе равен параметру из запроса
-snippets: response body:JSON value check

$ pm.test("name", function () {
	pm.expect(res_name).to.eql(req_name);
});
- где pm это библиотека postman
- где test это параметр для тестирования 
- где "name" это имя теста
- где function это параметр который указывает условие
- где expect это параметр который мы ожидаем
- где res_name это параметр взятый из ответа, с котором будем сравнивать
- где to.eql это условие как именно сравнивать параметры (параметры равны)
- где req_name это параметр взятый из запроса для сравнения с expect
 
9. вывести в консоль элемент параметра из response
$ console.log("salary_response = ", res_salary)
- где console.log это команда для отображения в консоли
- где "salary_response =" это просто имя переменной для вывода в консоль (оно может быть любым)
- где res_salary это имя переменной которую установили выше, в которую входит данные salary из response.

-если надо вывести конкретный элементы из параметра
$ console.log("salary_0 =", res_salary[0])
- где res_salary[0] это порядковый номер элемента в структуре json response

- если надо проврить что какой то элемент равен другому элементу из запроса/ответа
$ console.log("salary =" res_salary[2] == req_salary*3);
- где == это условия сравнения (означает что равно)
- где  req_salary*3 это имя переменной в которую внесены данные параметра salary из request и уноженное на 3

$ pm.test("salary", function () {
     pm.expect(res_salary).to.include(req_salary)
});

10. как проверить структуру json в ответе
$ var schema = {вставить сюда схему} 
$ pm.test("schema", function(){
     pm.response.to.have.jsonSchema(schema)
  });

11. проверка что элемент массива salary больше чем другие элементы
$ pm.test("salary_2 > salary_1 && salary_0"), function () {
	pm.expect(salary_2).to.greaterThan(salary_1)
	pm.expect(salary_2).to.greaterThan(salary_0);
});

12. проверка что значение поля = значению переменной из окружения
$ pm.test("environment name", function () {
	pm.expect(pm.environment.get("name")).to.eql(res_name);
});

13. взять любой объект из присланного списка, использовать js random. В объекте взять Cur_ID и передать через окружение в следующий запрос.
$ var jsonData = pm.response.json();
$ var random = jsonData[Math.floor(Math.random() * jsonData.length)];
$ console.log(random);
$ pm.environment.set("Cur_ID", random.Cur_ID);

14.проверить что у параметра в ответе, есть параметр 
$ pm.test("name", funcrion () {
     pm.expect(JSON.stringify(res_dog)).to.include("name")
});
- где JSON это структура ответа
- где stringify это что в структуре JSON есть такой параметр

15. написать цикл который выведет по порядку элементы списка из параметра
$ for (let i = 0; i < res_salary.length; i++) {
	console.log(res_salary[i]);
}

- где i это переменная итератор которая заходит в массив с нуля и начинает перебирать
- где length это свойство которое определяет размер и длину массива
- где i++ это показаетль что итератор будет двигаться по массиву. аналогичная запись i = i + 1;

или 

$ for (i in res_salary) {
	console.log("key" + i, "value" + res_salary[i]);
};
- где i входит в параметр 
- где "key" + i это показывает поход итератора, его путь
- где "value" + res_salary[i] это непосредственно вывод значений массива

16. забрать токен с ответа и поместить в окружение
$ let jsonData = pm.response.json();
$ let token = jsonData.token;
$ pm.environment.set("token", token);

17. проверка что значения поля name = значению паременной name из окружения
$ pm.test("test", function() {
	pm.expect(pm.environment.get("name")).to.eql(res_name)
});

18. взять любой объект из списка используя JS random.
сначала спарсим респонс где есть json с данными
$ let jsonData = pm.response.json();

потом проведем рандом и выведем рандомный объект
$ let random = jsonData[Math.floor(Math.random() * jsonData.length)];
console.log(random);
- где Math.floor() это метод округления вниз, округляет аргемент до ближайшего меньшего целого.
- где Math.random это метод возращает псевдослучайное число.

после поместить в окружение значение рандомного объекта
$ pm.environment.set("CUR_ID", random.Cur_ID);
- где random.Cur_ID это то по какому уникальному номеру заносить в окружение из рандомного выбора.

19. установка и запуска newman в терминале
- необходимо наличие node.js и npm
- проверяем наличие данных расширений
$ node --version
$ npm --version

- если их нет, то устанавливаем 
- после надо установить newman
$ npm install -g newman
- если выдает ошибку EACCES
$ sudo chowm -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
- после устанавливаем newman

- после экспортируем коллецию из postman. можно как ссылкой, можно как файл json
- после запускаем 
$ newman run link/file

20. проверка типа данных
$ console.log("type" + typeof req_name);	
