1. что такое postman
- это приложение для взаимодейятсвия и тестирования API

2. что такое newman CLI
- это командая строка для postman 

3. что такое окружение 

4. что такое парсить респонс и как его делать
- забрать данные которые присылает сервер в ответе
$ var jsonData = pm.response.json()
- где jsonData просто переменая с удобным для меня именем, должно быть уникальным
- где pm это библиотека postman
- где response это параметр для парсинга ответа сервера
- где json() это параметр в каком виде забрать ответ

$ var res_name = jsonData.name
- где res_name это имя переменной (может быть любым, но уникальным)
- где jsonData это имя переменной в которую внесены данные что нужно зайти в структуру response
- где .name это какой именно параметр забрать

- если нужно забрать параметр в другом типе (string or number etc)
$ var res_age = String(jsonData.age);
- где String это тип в который преобразовать данные
- где (jsonData.age) какой именно параметр забрать 

- если нужно забрать данные из response, но имя имеет в себе . 
$ var res_salary_1_5 = jsonData[qa_salary_after_1.5_year];
- где [qa_salary_after_1.5_year] это имя параметра который содержит . и без [] имя прерывается на . 

- если нужно забрать какой то элемент из древа структуры json и зрабарть определенный элемент
$ var res_name = jsonData.person.u_name[0]
- где preson.u_name[0]  это путь к данным что нам нужно
- где person это корневое название параметра в структуре json в котором находится параметр который нам надо
- где u_name это имя параметра в котором содержится элемент который нам надо
- где [0] это порядковый номер элемента в структуре  

5. что такое парсить реквест и как его делать
- это забрать данные которые клиент посылает на сервер
- сначала парсим весь запрос
$ var req = request.data (method post)
- где req это просто имя переменной, оно может назвыаться как угодно, главное чтоб было уникальным
- где request это параметр который лезет непосредственно в запрос
- где data это параметр который забирает информацию
$ var req = pm.request.url.quer.toObject() 

- после создаем переменные с конкретными данными запроса
$ var req_name = req.name
- где req_name просто переменная с удобным для меня названием
- где req это переменная в которой заключены параметры из выше (var req = request.data)
- где name это имя ключа который надо забрать  из запроса клиента на сервер
 
6. как отпрвлять запрос на сервер методом get post
- если хотим отправить запрос на сервер методом get, то можно написать данные в окне params либо в URI отделив endpoint c параметрами ? знаком, а параметры разделять &  например http://162.55.220.72:5005/get_method?name=alex&age=25 
- если хотим отправить запрос методом post, то можно вписать данные в окне body form-data. либо в окне body raw (json) вручную написать json схему. 

7. как заносить данные в environment
- можно вручную через графический интерфейс в постмане 
- можно автоматически парсить параметры запроса
$ pm.environment.set('name', req_name)
- где pm это библиотека постман
- где environment параметр куда залезть
- где set это что именно сделать (положить,установить,занести)
- где 'name' это название которое присвоется ключу в окружении
- где req_name это какой именное значение занести в окружение

8. проверить что параметр в ответе равен параметру из запроса
$ pm.test("name", function () {
	pm.expect(res_name).to.eql(req_name);
});
- где pm это библиотека postman
- где test это параметр для тестирования 
- где "name" это имя теста
- где function это параметр который указывает условие
- где expect это параметр который мы ожидаем
- где res_name это параметр взятый из ответа, с котором будем сравнивать
- где to.eql это условие как именно сравнивать параметры (параметры равны)
- где req_name это параметр взятый из запроса для сравнения с expect
 
9. вывести в консоль элемент параметра из response
$ console.log("salary_response = ", res_salary)
- где console.log это команда для отображения в консоли
- где "salary_response =" это просто имя переменной для вывода в консоль (оно может быть любым)
- где res_salary это имя переменной которую установили выше, в которую входит данные salary из response.

-если надо вывести конкретный элементы из параметра
$ console.log("salary_0 =", res_salary[0])
- где res_salary[0] это порядковый номер элемента в структуре json response

- если надо проврить что какой то элемент равен другому элементу из запроса/ответа
$ console.log("salary =" res_salary[2] == req_salary*3);
- где == это условия сравнения (означает что равно)
- где  req_salary*3 это имя переменной в которую внесены данные параметра salary из request и уноженное на 3

8. как проверить структуру json в ответе


 
