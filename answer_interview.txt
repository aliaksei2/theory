1. тестирование это проверка соотвествия между фактическим и ожидаемым реазультатом. контролируется качество приложения
2. цель тестирования состоит в том чтоб убедится что приложение полностью удовлетворяет ожиданиям заказчика и что потенциальный пользователь удовлетворит свои потребности с помощью приложения
3. я решил стать тестировщиком по сколько мне интересна данная сфера. мне нравится что тестировщик на проекте играет большую роль и участвует на всех этапах разработки, что не будет такого что он сидит без дела
4. я знаю несколько видов документации: тест план, тест стратегия, тест естимейтит, таблицы для тест дизайна, чек лист, тест кейс, баг репорт, тест репорт
5. я знаю про попарное, граничащие значения, класс эквивалентности, таблица принятий решений, таблица состояний переходов, доменный анализ
6. класс эквивалетности это когда берем все символы которые мы можем вписать в поле ввода и делим и на классы эквивалентности чтоб сократить количество вводимых данных не теряя эффективность. граничные значения это когда мы проверяем границы допустимого ввода символов. мы проверяем значения -1 0 и +1. проверяется по сколько именно на границе часто происходят косяки.
7. это таблица в которой пишутся все возможные варианты ввода/выбора данных и то какой результат должен проихойти при определенной комбинации
8. на сколько я знаю их 9: корректные, полные, проверяемые, недвусмысленные, непротиворечивы, приоритетные, атомарные, модифицируемые и отслеживащие
9. этапы тестирования: ознакомление с требованиями, продумывание плана тестирования, создания тестовой документации, тестирование, развертывание и поддрежка
10. чек лист это список того что мы должны проверить
11. тест кейс это документ где описано как именно мы будем проводить проверку из чек листа
12. разница между ними что чек лист просто перечень проверок, а тест кейс это более конкретная информация как мы будем тестировать
13. юз кейс это документ где описано что именно пользователь может делать в приложении
14. тест план это один из основных документов где описывается цели и задачи тестирования,стратегия, окружения, ресурсы, расписания, обязанности, риски, контроли релизов
15. верификация это проверка соотвесвтия приложения на данном этапе тестирования с тем, что было установленно в начале этапа. валидация это проверка уже готового приложения на соотвествия итогового продукта с тем что ожидалось
16. баг это изъян в системе который приводит к блокировки использования всего приложения или какой то его функциональности либо делает эксплуатацию прилоежния неудобным.
17. обязтаельные атрибуты баг репорта: айди, автор, тайтл, степ ту репродьюз, ожидаемый и фактический результат, северити и приорити, аттач
18. северити это способ оценки серьезности бага влияющий на функциональность и удобство пользователя. 5 уровней: блокер, критикал, мейжа, мейейжа, мейнор, тривиал. а приорити это оценки приорите исправления бага чтоб бизнес меньше всего пострадал. есть 4 уровня: ас сун ас посибал, хай, медиум, лоу
19. ошибка в названии компании
20. есть 7 принципов: тестирование отображает наличие ошибок, избыточное тестирование невозможно, тестирование на ранних стадиях, скопление ошибок, парадокс пестицида, тестирование зависит от контекста и заблуждение об отсуствии ошибок
21. функциональное тестирование и нефункциональное
22. функциональное тестирование это проверка функциональной части приложения с тем, что было прописано в функциональном ТЗ. нефункиональное это проверка всего того, что не вошло в функциональную часть
23. позитивное тестирование это когда проверяется то поведение пользователя, на которое рассчитывает система. негативное тестирование проверяет то как система будет вести себя при нестандартном использовании приложения
24. я знаю методы черного, белого и серого ящика, а также статическое и диначисекое. метод черного ящика или как его еще называют тестирование поведения. во время тестирования данным методом тестировщик не знает внутреннюю систему приложения. он не знает что и как прописано в коде для какого то результута при каком то действии. тестирвощик просто тестирует приложение и смотрит на поведение приложения. белый ящик это когда тестировщик знает всю внутреннюю структуру приложения. знает что прописано в коде и знает что произойдет и что нужно сделать для определенного результата. серый ящик это когда тестировщик знает только часть внутренней структуры кода. статическое тестирование это когда тестируется приложение без запуска кода. проверяется документация, дизайн, гуи. в динамическом тестировании происходит запуск кода и проверяется непосредсвтвенно само приложение и как оно работает
25. смоук это первоначальная проверка приложения нацеленная на проверку базовой функциональности. чтоб убедиться что оно хотя бы работает и можно начинать проводить тестирование. регрессионное тестирование проводится после добавления новой функциональности или когда были исправлены баги. делается это чтоб убедится что изменения или добавления в коде не навредили тому что и так работало до этого.
26. проверю какой приходит статус код. если код 500 то дело с бэк. попробую отправить запрос через постман и посмотреть что будет. если статус код другой, то дело на фронте и посмотрю есть ли файл html
27. узнаю все ее параметры. после через девтулс посмотрю кликабельна ли она, та ли ссылка внедрена в эту кнопку, зона кликабельности кнопки
28. узнаю про входные данные. после составлю таблицы по техникам тест дизайнам и буду проверять
29. 
30. позитивные: проверка включения выключения, подключение к зарядке и зарядка, построение цифровой карты помещения, всысывание грязи, подключение к сети. негативные: отуствие подключение к сети, отсутсвие электричества, застрял между припятсвиями, мусорный бак переполнен, разрядился аккумулятор во время работы
31. первым делом нужно узнать объем работы, размер приложения. после накидать приблизительный план проверок и сделать тест истимацию. попросить доступ как администратор, так и тестовый аккаунт обычного пользователя, плю сесли надо, то тестовый данный для проверки оплаты
32. санитарное тестирование проводится после смоук. его цель это углуюится в какую та функуиональность для определния на сколько хорошо она работает. если сравнить смоук и саниту, то смоук его цель охватить больше функциональности, но поверхностно, а санитарное тестирование оно направлено вглубь функциональности.
33. клиент серверная архитектура это модель показывающая как именно происходит связь между клиентом и сервером. эта цепочка состоит из: клиент - центральный камутатор - домейн найм сервис - сервер - база данных. есть монолит и есть микросервис. отличие в том,что в микросервисной архитектуре у сервера есть микросервисы, к которым сервер обращает за какой то конкретной ифнормацией которой распологают сервисы. их может быть много и сервер знает какая информация хранится на каком сервисе и образается напрямую к ним.
34. фронт отвечает за сторону клиента. это внешний вид, отправка запросов и развертывание ответов от сервера. бэк отвечает за сервер, он должен принимать запросы с фронта, обрабатывать их и отправлять ответ на заданный запрос.
35. html это язык разметки, нужен для структурирования информации на сайте. тап описывает то какая информация где будет находится, какой будет цвет,размер и какую функцию будет выполнять кнопка
36. dns это сервис который хранит в себе информацию айпи сайтов и их названий, для того чтоб когда происходил запрос с клиента, было понятно куда именно направить этот запрос. условно это справочное бюро которое говорит где именно находится тот сервер, который нужен
37. это файл который работает в связку с html. он нужен для того чтоб информация из html файла преобразовалась в красивую страницу с функционалом.
38. rect api это то благодаря чем происходит взаимодействие клиент и сервера для получения и передачи какой либо информации
39. отличия от soap в том что soap это протокол и нужен для безопасного соединения между устройтвами. используется для передачи электронных писем, файлов.
40. кэш это папка на локальном компьютере куда сохраняются изображения и видео для того чтоб при следующем заходе на данный сайт, сайт использовал уже загруженные изображания и загрузка страницы происходила быстрее. куки это файл с информаций об предпочтениях пользователя. там хранится информация об индивидуальных настройках, предпочтениях.
41. это сопосб беспрерываного общения сервера с клиентом. эта технология помогает в фоновом режиме общаться клиенту и серверу. общение происходит без перезагрузки страницы.
42. 
43. http отличается от https только тем, что второй протокол безопасней. в данном протоколе идет шифрование данных что помогает обезопасить личную информацию пользователя
44. в запрос http входит: метод запроса, эндпоинт, бади, хедер
45. коды ответа делятся на 5 групп. в группу сотых входит информтивные информация. в группу двухсотых входит информация об успешном выполнении действия. в трехсотую входит информация об переодресации. в четырехсотую входит информация что произошла ошибка на стороне клиента. и в пятисотую входит информация что произошла ошибка на стороне сервера
46. tcp-ip это набор протоколов для общения в сети между компьютерами. по ним обычно передают почту или файлы.
47. tcp это протокол который контролирует доставку и целостность файла. если доставка была прервана или файл был поврежден, то протокол самостоятельно сделает повторный запрос на отправку. udp это тоже протокол доставки, только он менее отвественный. его задача просто доставить файл и все, не важно в каком состоянии этот файл доставится
48. эдхок тестирование это способ тестирования приложения без знания приложения и документации. данный вид тестирования может делать по сути любой человек, по сколько тут не важен опыт и знания об приложении. ты просто интуитивно используешь приложение и смотришь как оно себя ведет
49. исследовательское тестирование оно чем то похоже на эдхок, но отличается тем что тут важен опыт тестировщика, он знает немного о приложении и во время тестирования он паралелльно пишет документацию
50. микросервисы это часть клиент серверной архитектуры. они работают в связке с сервером и такими же микросервисами. каждый микросервис содержит в себе какую та информацию, выполняет какую та функцию. и когда происходит запрос на сервер, сервер понимает в каком микросервисе находится информация и делает запрос туда чтоб получить информацию и после отправить на клиент. микросервисы могут общаться только друг с другом и с сервером, они не взаимодействуют напрямую с клиентом
51. модели оси показывают как именно происходит связь между система в сети. выделяют 7 уровней: физический, канальный, сетевой, транспорный, сеансовый, представления и приложения.
52. жизненный цикл по начинает со сбора и анализа данных.на данном уровне тестировщик начиает тестировать документацию на наличие каких либо смысловых ошибок котоыре могут привести к путанице в разработке. потом идет дизайн. на этом уровне тестировщик тестирует макет, дизайн приложения. следуюший этап разработка. на этом уровне тестировщие пишет тестовую документацию которая ему пригодится в тестировании и ждет когда разработчики что то сделают что можно протестировать. потом идет тестирование того что разработали. и когда все впорядке идет этап развертывания и эксплуатации. тут проверяется что релиз прошел успешно, приложение функционирует и ждем какие та отзывы от пользователей, чтоб если они нашли какой то баг, то мы смогли его быстро устранить
53. тестирование стоит начинать как можно раньше. на уровне написании требований. по сколько чем раньше найдем ошибки, тем быстрее, проще и дешевле обойдется проект для заказчика
54. 
55. я знаю такие методологии: вотерфол, В модел, спираль, инкрементал, итератив, канбан и скрам.
56. скрам это гибкая методология. ее основные особенности это наличие скрам мастера, спринтов, беклоги. аджаил это гибкая методолия в которую входит такие виды как скрам и канбан. вотерфол это методология в которой главная особенность что этапы строго идут друг за другом, и нельзя приступить к следующему, не закончив на 100% прошлый
57. постман, девтулс, база данных, чарлиз, андроид студио и хкод, джиетр
58. в проверку мобильного приложения входят: установка, обнволение, прерывание, реконекты, ориентация, режимы работы
59. 
60.
61. звонок, уведомление, разряжение телефона, подключение других устрйоств
62. это проверка на то что приложение работает на разных устройствах на разных платформах
63. можно протестировать ориентацию, кликабельность кнопок, наличие нужных файлов, скорость загрузки, кэширование, подмену локали, адаптивность под разные размеры устройств
64. сниффер это приложение которое по сути внедряется между клиентом и сервером, перехватывает запросы и ответы. можно посмотреть что именно отправляется на сервер, что именно сервер возвращает. можно подменить запрос
65. get, head, post, put, delete
66. отличается тем что гет просто просит предоставить информацию. а пост вносит новую информацию на сервер
67. баг найден и оформлен, баг назначен для исправления, баг принят на исправление, устранен, заново протестирован, закрыт 
68. для того чтобы при тестировании файлы и данные не подгружались из кэша и можно было уведить полную картину работы сайта
69. пре альфа, альфа, бетта, пре релиз и релиз
70. джейсон это формат файла для передачи и хранния информации удобный для чтения как компьюетру так и для человека. используется формат написания ключ значение где ключ может быть только стринг, а значение любым типом. в основном используется в рест апи. эксемель это язык разметки для структурированного хранения и написания данных удобных для человека и компьютера. используется формат написать тег. используется только в соап апи





