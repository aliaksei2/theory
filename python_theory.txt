есть два варианта исполнения команда:
1. интерактинвый (немедленное) исполнение - это когда мы пишем команду в окне и сразу же можем ее воспроизвести. недостаток данного варианта это что команды не сохраняются
2. файловый когда код пишется в файле, а после можно запустить код взяв его из файл

что внутри программы: данные, вычисления, проверка условий, циклы

данные в питоне: объект(хранилище данных), объект с числом, объект со строкой.
объкта с числом и со стракой не может быть.

type of data:
целочисленное int = 5
вещественное float = 5.1
строчные str = 'hello'
комплексый complex = 
переменная это ссылка на данные, а не сами данные

каскадная присваивание a=b=c=0

command id() это индитификатор объекта на который ссылается переменная указанная в скобках

множественное присвание: а, b = 1, 2

функция: type() показывает какой тип данных в переменной
print(type(a))
abs() - для вычисления модуля числа (a = abs(-5))
min находит минимальное значение  
max находит максимальное значение
pow возводит числа в степень. аналог ** (pow(3, 2))
round округление чисел. (round(7.54564, 2)) где двойка отображает до какого числа округлять, в данном случае до сотых
input() ввод данных с клавиатуры например: a = input()
можно обединять функции в одну строку. например: a = int(input()) это позволяет все введенные данные преобразовывать в целочисленные числа если такое возможно преобразовать 

пример ввода данных квадрата для вычисления периметра:
a = float(input("введите данные: "))
b = float(input("введите данные: "))
print("периметр квадрата: ", 2 * (a + b))
в данном примере данные вводятся с новой строки после нажатия enter. чтоб вводить данные в одну строку через пробел, нужно сделать так:
a, b = map(float, input("введите данные: ").split())
print("периметр квадрата: ", 2 * (a + b))
теперь можно вводить данные через пробел в одну строку

параметры:
sep=" " указывает какой разделить между показателями ставить (print(a, b, c, sep=" | ")) выведет так (a | b | c)
end=" " казывает какой символ будет в конце строки, также можно объединить несколько print в одну строку (print("hello", end=".")
f параметр который позволяет в строку внедрять переменные
например print(f"координаты точек: x = {x}; y = {y}") где в {} указана переменная
len() - 1 показывает сколько символов в строке. -1 потому что счет идет с 0 
in позволяет узнать есть ли какие та символы в строках. например: 'abc' in 'abcdsf' и выдаст true
orb('') показывает код символа 



имена переменных:
1. имена следует брать существительными (кто что)
2. должны быть осмысленными и отражать суть данных


арифметические операции:
+ сложение
- вычитание
* умножение
/ деление
// деление с округлением
% остаток деления
** возведение в степень


для импорта функций:
import:
import math будет импортированны математические функции. и после нужно указать (math.ceil(5.2))

bool:
чтоб проверить число четное или нет. мы должны поделить число на 2, и если оно делится без остатка, то оно четное. выглядит это так
a = 30
a % 2 == 0
чтоб проверить число не четное, то нужно поставить знак неравенства !=

0 = false 
1 = true

символы:
/n это спецсимвол служит для перехода на новую строку

если надо продублировать значения в строках, можно посавтить знак умножения и число. например: "привет" * 3 ; и данное слово пропишется 3 раза

порядковый номер символа в строке это индекс, начинается с 0
можно перебирать буквы в строках. например:
строка[start:stop]
а = "привет мир"
а[2:5] 
"иве"

строка[start:stop:step]
а = "привет мир"
а[2:8:2]
"ие "

строка это не изменяемый объект, если нам нужно что то изменить в структуре строки, то это сделать невозможно. можно только создать новую переменную с нужными изменениями
например: 
a = 'hello world'
a2 = 'H' + a[1:]
a2 == 'Hello world'

если мы хотим использовать какой то метод к данной переменной, мы используем формулу: переменная.метод()
например:
a.upper()
то данные метод сделает все буквы в данной переменной заглавными
если мы хотим сохранить результат метода, то мы можем сохранить его в переменной. например: 
b = a.upper()

мы можем заменить быквы на другие буквы с помощью метода replace. например:
a = 'hello python'
a.replace('o', 'A')
a == 'hellA pythAn'


